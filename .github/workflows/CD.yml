name: CD - Deploy ASP.NET App

on:
  workflow_dispatch:
    inputs:
      image_tag:
        description: 'Tag of Docker image to deploy (e.g. 0.1.0-dev-d-a1b2c3d4)'
        required: true
      environment:
        description: 'Target environment (production, staging, development)'
        required: true

env:
  DOCKER_REPO: pptloc/aspnetapp

jobs:
  deploy-to-vm:
    runs-on: ubuntu-latest
    environment:
      name: ${{ inputs.environment }}

    steps:
      - name: Validate input values
        run: |
          TAG="${{ inputs.image_tag }}"
          ENV="${{ inputs.environment }}"

          if [[ ! "$TAG" =~ ^[0-9]+\.[0-9]+\.[0-9]+-(dev|staging|production)-(d|s|p)-[a-f0-9]{8}$ ]]; then
            echo "::error::‚ùå Invalid image tag format: $TAG"
            exit 1
          fi

          if [[ "$ENV" != "production" && "$ENV" != "staging" && "$ENV" != "development" ]]; then
            echo "::error::‚ùå Invalid environment: $ENV"
            exit 1
          fi

      - name: Deploy to Azure VM via SSH
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ secrets.AZURE_HOST }}
          username: ${{ secrets.AZURE_USERNAME }}
          key: ${{ secrets.AZURE_SSH_KEY }}
          script: |
            IMAGE="${{ env.DOCKER_REPO }}:${{ inputs.image_tag }}"
            CONTAINER_NAME="aspnetapp-${{ inputs.environment }}"

            echo "üöÄ Pulling image: $IMAGE"
            docker pull $IMAGE

            echo "üõë Stopping previous container (if any)..."
            docker stop $CONTAINER_NAME || true
            docker rm $CONTAINER_NAME || true

            echo "‚úÖ Running new container..."
            docker run -d \
              --name $CONTAINER_NAME \
              -p 80:8080 \
              --restart unless-stopped \
              -e ASPNETCORE_ENVIRONMENT=${{ inputs.environment }} \
              --label deployed_by=github_actions \
              --label env=${{ inputs.environment }} \
              --label version=${{ inputs.image_tag }} \
              $IMAGE

            echo "‚úÖ Successfully deployed: $IMAGE on $(date)"
